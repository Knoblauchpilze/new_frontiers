#ifndef    VFX_MENU_HH
# define   VFX_MENU_HH

# include <memory>
# include "Menu.hh"
# include "../world/Tiles.hh"

namespace new_frontiers {

  class VFXMenu: public Menu {
    public:

      /**
       * @brief - Create a new vfx menu allowing to interact
       *          (typically by creating or removing) vfxs in
       *          the world. Upon clicking on this menu a new
       *          action to register or remove a vfx will be
       *          created.
       * @param pos - the position of the menu in the parent.
       * @param size - the dimensions of the menu.
       * @param name - the name of this menu.
       * @param type - the type of action attached to this menu.
       *               We mostly support `Creation` or `Deletion`
       *               here so an error will be raised of the
       *               type is not one of those.
       * @param vfx - the vfx attached to this menu. It will
       *              be associated to any action generated by
       *              this menu.
       * @param id - the variant of the vfx (default is `0`).
       * @param parent - the parent menu for this element. Specify
       *                 `null` in case the menu is the root of the
       *                 subsystem.
       */
      VFXMenu(const olc::vi2d& pos,
              const olc::vf2d& size,
              const std::string& name,
              const action::Type& type,
              const tiles::Effect& vfx,
              int id = 0,
              Menu* parent = nullptr);

      /**
       * @brief - Desctruction of the object.
       */
      ~VFXMenu();

    protected:

      /**
       * @brief - Interface method allowing inheriting classes
       *          to perform the creation of their own actions
       *          whenver a click is detected on this menu.
       *          For now this method is only triggered when a
       *          click witht he left mouse button is detected.
       *          The default implementation does nothing.
       * @param actions - output vector to register actions if
       *                  needed.
       */
      virtual
      void
      onClick(std::vector<ActionShPtr>& actions) const;

    private:

      /**
       * @brief - The tile representing the vfx attached to
       *          this menu. Any action will concern this kind
       *          of vfx.
       */
      tiles::Effect m_vfx;

      /**
       * @brief - The variant for the vfx attached to this
       *          menu.
       */
      int m_vVariant;

      /**
       * @brief - The type of action associated with this menu.
       *          Should be on of `Creation` or `Deletion` which
       *          correspond to either spawning or deleting a
       *          vfx from the world.
       */
      action::Type m_type;
  };

}

# include "VFXMenu.hxx"

#endif    /* VFX_MENU_HH */
